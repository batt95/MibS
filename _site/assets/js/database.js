window.database = {
  
    
      
    
      
    
      
    
      
    
    "input-html": {
      "title": "File Format",
      "category": "",
      "content": "# MibS Input File Format## Version 1Major version 1 of MibS requires two input files. 1. An _instance file_ in MPS, LP, or GMPL/AMPL format that contains a description of the upper level objective, the variables (upper and lower level), and the constraints (upper and lower level); and  2. An _auxiliary (aux) file_ that contains information necessary to identify the upper and lower level constraints and variables.### The Instance FileThe instance can be in any of the standard formats mentioned above. These arethe same formats utilized by all MILP solvers. Information about these formatscan be easily found with an Internet search. ### The Auxiliary FileEach line in the auxiliary file contains a pair of elements: a type indicatorand a data value. The type indicators are as follows.| Type Indicator | Associated Data                                     ||----|-----------------------------------------------------------------|| N  | the number of lower level variables                             || M  | the number of lower level constraints                           || LC | name/index of one of the lower level variables                  || LR | name/index of one of the lower level constraint                 || LO | coefficient of a variable in the lower level objective function || OS | lower level objective sense (1=min, -1=max)                     |Note that variables and constraints can be identified either by index or name.When indentified by index, variables are assumed to be in the order theyappear in the input file (indices start at 0). Similarly, constraints areassumed to be in the order they appear in the input file (indices start at 0).For the lower level objective, coefficients are assumed to be in the order oflower level variables. Currently, there is no option for specifying thelower-level objective using names.### ExampleThe model:```min  -x − 7ys.t. −3x + 2y ≤ 12     x + 2y ≤ 20     x ≤ 10     y ∈ arg min {z : 2x - z ≤ 7,                      2x + 4z ≤ 16,                      z ≤ 5}```The MPS file:```NAME generalExampleROWS L  R0 L  R1 L  R2 L  R3 N  R4COLUMNS    INT1 'MARKER' 'INTORG'    C0   R0       -3    C0   R1       1    C0   R2       2    C0   R3       -2    C0   R4       -1    C1   R0       2    C1   R1       2    C1   R2       -1    C1   R3       4    C1   R4       -7    INT1END 'MARKER' 'INTEND'RHS    B    R0       12    B    R1       20    B    R2       7    B    R3       16BOUNDS UP BOUND C0      10 UP BOUND C1      5ENDATA```The auxiliary file:```N 1M 2LC 1LR 2LR 3LO 1OS 1```Optimal solution: x = 6, y = 5## Version 2Major version 2 accepts the same file format as version 1 for deterministicinstances and additionally accepts stochastic instances in the following twoformats. 1. Provide an MPS file, a time file, and a stoch file, as in the well-known    [SMPS format](http://www.maximalsoftware.com/resources/GassmannKristjansson_dpm007v1.pdf). The second-stage objective coefficients should be defined at    the end of the time file (see    [here](https://github.com/tkralphs/BilevelLib/blob/master/stochastic/sslp/bilevel_nonZeroSum_sslp_10_50_50.tim)). 2. Provide an MPS file and an auxiliary information file in the same way as    deterministic bilevel problems. The probability distributions of the    random variables also should be specified by setting the values of    corresponding parameters (`MibS` currently supports only the discrete    uniform distribution). For a sample parameter file, see    [src/mibsStochastic.par.in].",
      "url": "/input.html",
      "href": "/input.html"
    }
    ,
  
    
    "parameters-html": {
      "title": "Parameters",
      "category": "",
      "content": "# Parameters## ALPS Parameters| Parameter Name | Description                                     ||----------------|-------------------------------------------------|| Alps_instance | Path to instance file || Alps_timeLimit | Overall wallclock time limit || Alps_nodeLimit | Limit on number of nodes explored || Alps_msgLevel | Verbosity level for ALPS message. Set > 5 for additional debugging output || Alps_logFileLevel | Whether to create log file and its verbosity. Currently, this option dumps parameter settings at level 1 and that's it. || Alps_searchStrategy |  `0`: Best first  `1`: Best estimate   `2`: Breath first  `3`: Depth first  `4` Hybrid || Alps_nodeLogInterval | How frequently to print status lines |## BLIS Parameters### General| Parameter Name | Description                                     ||----------------|-------------------------------------------------|| Blis_scaleConFactor | Level of dynamism above which cuts will be discarded. Note that setting this too low can result in incorrect results, since cuts necessary for validity may be thrown out || Blis_denseConFactor | Cut density above which cuts will be discarded. Note that setting this too low can result in incorrect results, since cuts necessary for validity may be thrown out || Blis_heurStrategy | When to call heuristics (default)  `0`: disable  `1`: root  `2`: auto  `3`: periodic || Blis_heurCallFrequency | How often to call heuristics || Blis_heurRoundStrategy | When to call rounding heuristic (default)  `0`: disable  `1`: root  `2`: auto  `3`: periodic || Blis_heurRoundFreq | How often to call heuristics || Blis_branchStrategy |  MibS uses pseudocost branching by default and the other strategies are untested.  `0`: max infeasibility  `1`: pseudocost  `2`: reliability  `3`: strong |### CutsThese are parameters for controlling generation of inequalites valid forMILPs, which can be used to eliminate fractional solutions if desired. Thesecuts are all off by default, as they're usually not effective. | Parameter Name | Description                                     ||----------------|-------------------------------------------------|| Blis_cutStrategy | Strategy for cut generation (default)  `0`: disable  `1`: root  `2`: auto  `3`: periodic || Blis_cutGenerationFrequency | How frequently to generate MILP cuts || Blis_cutCliqueStrategy  Blis_cutGomoryStrategy  Blis_cutFlowCoverStrategy  Blis_cutKnapsackStrategy  Blis_cutMirStrategy  Blis_cutOddHoleStrategy  Blis_cutProbingStrategy  Blis_cutTwoMirStrategy | Strategy for generating individual classes of inequalities.  `0`: disable  `1`: root  `2`: auto  `3`: periodic || Blis_cutCliqueFreq  Blis_cutGomoryFreq  Blis_cutFlowCoverFreq  Blis_cutKnapsackFreq  Blis_cutMirFreq  Blis_cutOddHoleFreq  Blis_cutProbingFreq  Blis_cutTwoMirFreq | Frequency for generating individual classes of inequalities. ## MibS Parameters### GeneralThese are general MibS parameters| Parameter Name | Description                                     ||----------------|-------------------------------------------------|| MibS_auxiliaryInfoFile | Path to auxiliary info file || MibS_usePreprocessor | `0`: off  `1`: on || MibS_bilevelProblemType |  `0`: general  `1`: interdiction || MibS_objBoundStrategy |  How to derive a bound on lower level objective for preprocessing  `0`: LL obj bound  `1`: interdiction bound || MibS_whichActiveConMethod |  How to determine which constraints are binding  `0`: simple  `1`: basis || MibS_upperFileFormat |  `0`: MPS  `1`: AMPL/GMPL |### SubsolversThese are parameters related to solving subproblems for either checkingfeasibility or determining the best lower-level solution associated with agiven upper-level solution by solving an auxiliary MILP.| Parameter Name | Description                                     ||----------------|-------------------------------------------------|| MibS_solveSecondLevelWhenXYVarsInt | `0`: false  `1`: true|| MibS_solveSecondLevelWhenXVarsInt | `0`: false  `1`: true|| MibS_solveSecondLevelWhenLVarsInt | `0`: false  `1`: true|| MibS_solveSecondLevelWhenLVarsFixed | `0`: false  `1`: true|| MibS_computeBestUBWhenXVarsInt | `0`: false  `1`: true|| MibS_computeBestUBWhenLVarsInt | `0`: false  `1`: true|| MibS_computeBestUBWhenLVarsFixed | `0`: false  `1`: true|| MibS_useLinkingSolutionPool | `0`: false  `1`: true|| MibS_doDualFixing | `0`: false  `1`: true|| MibS_feasCheckSolver | Options are currently  -`Cbc`  -`SYMPHONY`  -`CPLEX` || MibS_warmStartLL | `0`: false  `1`: true|| MibS_maxThreadsLL | Number of threads to use for parallel solve of lower level problem || MibS_whichCutsLL            |  `0`: no cuts  `1`: gomory only  `2`: all cuts |### HeuristicsThese are parameters for controlling heuristics.| Parameter Name | Description                                     ||----------------|-------------------------------------------------|| MibS_useLowerObjHeuristic |  `-1`: auto  `0`: false  `1`: true || MibS_useObjCutHeuristic |  `-1`: auto  `0`: false  `1`: true || MibS_useWSHeuristic | `-1`: auto  `0`: false  `1`: true || MibS_useGreedyHeuristic |  `0`: false  `1`: true |### BranchingThese are parameters for controlling branching.| Parameter Name | Description                                     ||----------------|-------------------------------------------------|| MibS_branchStrategy |  `0`: fractional  `1`: linking |### CutsThese are parameters for controlling generation of valid inequalities. For an explanation, please see this [technical report]( http://coral.ie.lehigh.edu/~ted/files/papers/MibSCuts20.pdf).| Parameter Name | Description                                     ||----------------|-------------------------------------------------|| MibS_cutStrategy |  `0`: branch only  `1`: cut only  `2`: use cut and branch || MibS_maxCutDepth | Deepest level of the tree at which cuts should be generated|| MibS_turnOffOtherCuts | Turn off all cuts not explicitly turned on by parameters  `0`: false  `1`: true || MibS_useFractionalCuts | Whether to generate cuts when solution is fractional (see tech report)  `0`: false  `1`: true || MibS_usePureIntegerCut |  Whether to generate this cut (called an _Integer No-good Cut_ in the tech report)  `0`: false  `1`: true || MibS_useValFuncCut | Whether to generate this cut  `0`: false  `1`: true || MibS_useNoGoodCut | Whether to generate this cut  `0`: false  `1`: true || MibS_useIncObjCut | Whether to generate this cut (called a _Benders Binary Cut_ in the tech report)  `0`: false  `1`: true || MibS_useBendersCut | Whether to generate this cut (called a _Benders Interdiction Cut_ in the tech report) `0`: false  `1`: true || MibS_bendersCutType | Whether to generate a single or multiple cuts (from different solutions) in each iteration  `0`: justOne  `1`: multiple || MibS_useGeneralNoGoodCut | Whether to generate this cut (called a _Generalized No-good Cut_ in the tech report)  `0`: false  `1`: true || MibS_useTypeIC | Whether to generate intersection cuts of Types I or II (see tech report)  `0`: false  `1`: true || MibS_bilevelFreeSetTypeIC | Whether to generate intersection cuts of Type I or II (see tech report)  `0`: Derive solution by solving lower level problem to optimality  `1`: Derive a solution by solving an auxiliary problem || MibS_useTypeWatermelom | Whether to generate watermelon intersection cuts (see tech report)  `0`: false  `1`: true || MibS_useBoundCut | Whether to generate this cut (see tech report)  `0`: false  `1`: true || MibS_boundCutOptimal | What kind of bound cut to generate (there is currently only one option)  `0`: false  `1`: true |",
      "url": "/parameters.html",
      "href": "/parameters.html"
    }
    
  
};
